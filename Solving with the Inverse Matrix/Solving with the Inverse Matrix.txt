15.9 Solving with the Inverse Matrix
***Note: This is a continuation of the inverse matrix calculator and matrix multiplication program. You will need both of these codes for this program.

We want to write a program that will solve a system of equations by calculating the inverse of coefficient matrix and then multiply it by the constant column vector.

Your goal is to complete the program below so that it does the following:

1) If the system has a unique solutions (so the coefficient matrix has an inverse), it returns each of the variables with what it equals to 3 decimal places. So in the form x_1=3.000 for instance. (This can be done using the "print("x_{} = {:0.3f}".format(i+1,your_value))".)

2) If the system does not have a unique solution it returns either "The system is not solvable as the matrix and vector are not the right size." if the original system has too many columns (so the coefficient matrix is not square) or "The matrix is square but it is not invertible." if the system is square but does not have a unique solution.

When setting up your code, you have two choices as to how to read in the constant column vector. If you want to call the complete matrix multiplication function, you will need to read in the vector as a matrix. If you only want to call the rowtimescolumn function then you can read the column in as a single list (i.e. just a row/column).

Ex: If the input is:

(1,2,3;0,1,0;0,1,1)
(3;2;1)
the program would return:

x_1 = 2.000
x_2 = 2.000
x_3 = -1.000
Ex: If the input is:

(1,2,3;0,1,0;0,1,1)
(2;1)
the program would return:

The system is not solvable as the matrix and vector are not the right size.
Ex: If the input is:

(1,2,3;1,2,3;0,1,0)
(1;2;3)
the program would return:

The matrix is square but it is not invertible.
Note: The code will already be set up to accept a matrix with row entries separated by commas and rows separated by semicolons, i.e. (1,2,3;4,5,6) is the matrix

1 2 3

4 5 6.




inp = input()       #reads in the matrix
inp_strip = inp.strip("(),[] ")              #removes brackets or parantheses and spaces
matrix = [list(map(float, t.split(","))) for t in inp_strip.split(";")]    #creates a matrix for input

inp_vec = input()       #reads in the second matrix
inp_vec_strip = inp_vec.strip("(),[] ")              #removes brackets or parantheses and spaces

#use the next line if you want to call all of the matrix multiplication program
#vector = [list(map(float, t.split(","))) for t in inp_vec_strip.split(";")]    #creates a matrix for input vector. This is to use matrix multiplication below. This is unnecessary if you only call row_times_column and loop through the vector

#use the next line if you only want to use the row_times_column function
vector = [float(t.strip("[](); ")) for t in inp_vec.split(";")]    #creates a list for the b vector

'''Your Code Here'''    #You need to put all of the inverse matrix calculator code in here. This includes the function needed to extend the matrix
'''Your Code Here'''    #You need to put all or part of the matrix multiplication code in here. Your choice here will decide what your solver function looks like

'''Your Code Here'''    #define a function that takes in a matrix and vector and calculates the inverse times the vector
    R = len(mat)
    C = len(mat[0])
    '''Your Code Here'''       #If the matrix is not square, set solution as the correct string.
        '''Your Code Here'''
    '''Your Code Here'''# Otherwise calculate the inverse
        '''Your Code Here'''
        if type(inverse) == str:
            solution = inverse       #this will return the correct message if the coefficient matrix is not invertible
        '''Your Code Here'''      #Otherwise we need to calculate the product of the inverse matrix and the column vector
    '''Your Code Here'''       #return your answer, called solution

'''Your Code Here'''       #call the function with matrix and vector as the inputs and assign it to the variable to_print

if type(to_print) == str:
    print(to_print)
else:
    '''Your Code Here'''        #otherwise we need to interate through the list and print each value using the required format                    
        '''Your Code Here'''